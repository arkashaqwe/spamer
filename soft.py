# main.py
import asyncio
from telethon import TelegramClient, errors
from telethon.tl.functions.contacts import GetContactsRequest
import os
import socks
from config import PROXY, MESSAGE, TELEGRAM


class TurboSender:
    def __init__(self):
        self.client = None
        self.saved_message = None

    async def create_client(self):
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏"""
        proxy = None

        if PROXY['enable']:
            if PROXY['type'] == 'socks5':
                proxy = (socks.SOCKS5, PROXY['host'], PROXY['port'],
                         True, PROXY['username'], PROXY['password'])
            elif PROXY['type'] == 'http':
                proxy = (socks.HTTP, PROXY['host'], PROXY['port'],
                         True, PROXY['username'], PROXY['password'])
            elif PROXY['type'] == 'mtproto':
                proxy = (PROXY['host'], PROXY['port'], PROXY['password'])

        self.client = TelegramClient(
            TELEGRAM['session_name'],
            TELEGRAM['api_id'],
            TELEGRAM['api_hash'],
            proxy=proxy
        )

    async def connect_account(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
        await self.create_client()

        try:
            await self.client.connect()

            if not await self.client.is_user_authorized():
                print("\nüîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79991234567): ").strip()
                await self.client.send_code_request(phone)
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()

                try:
                    await self.client.sign_in(phone=phone, code=code)
                except errors.SessionPasswordNeededError:
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                    await self.client.sign_in(password=password)

            me = await self.client.get_me()
            print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
            return True

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {str(e)}")
            return False

    async def create_template(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...")
        try:
            if MESSAGE['apk_path'] and os.path.exists(MESSAGE['apk_path']):
                msg = await self.client.send_file(
                    'me',
                    MESSAGE['apk_path'],
                    caption=MESSAGE['text'],
                    force_document=True
                )
                self.saved_message = msg
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ+APK —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {msg.id})")
            else:
                msg = await self.client.send_message('me', MESSAGE['text'])
                self.saved_message = msg
                print("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return False
        return True

    async def get_recipients(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
        recipients = []

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        async for dialog in self.client.iter_dialogs():
            if dialog.is_user and not dialog.entity.bot:
                recipients.append(dialog.entity)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contacts = await self.client(GetContactsRequest(hash=0))
        if hasattr(contacts, 'users'):
            recipients.extend(contacts.users)

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_recipients = []
        seen_ids = set()
        for r in recipients:
            if hasattr(r, 'id') and r.id not in seen_ids:
                seen_ids.add(r.id)
                unique_recipients.append(r)

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        return unique_recipients

    async def start_mailing(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not await self.create_template():
            return

        recipients = await self.get_recipients()
        if not recipients:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            return

        confirm = input(f"–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π? (y/n): ")
        if confirm.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return

        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
        success = 0

        for recipient in recipients:
            try:
                await self.client.forward_messages(recipient, self.saved_message)
                name = getattr(recipient, 'first_name', 'Unknown')
                print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {name}")
                success += 1
            except Exception as e:
                print(f"‚úï –û—à–∏–±–∫–∞: {type(e).__name__}")

        print(f"\nüî• –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success}/{len(recipients)}")


async def main():
    sender = TurboSender()
    if await sender.connect_account():
        await sender.start_mailing()


if __name__ == '__main__':
    try:
        import socks
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PySocks: pip install pysocks")
        exit(1)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")